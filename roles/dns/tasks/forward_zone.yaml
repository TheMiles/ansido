---

- set_fact:
    zone_file: "{{ chroot_dir }}/etc/bind/db.{{ zone }}"
    serial_date_today: "{{ ansible_date_time.year }}{{ ansible_date_time.month }}{{ ansible_date_time.day }}01"

- name: Check whether zone file is existing and needs updating
  stat:
    path: "{{ zone_file }}"
  register: zone_stat

- name: Retrieve serial number for zone
  block:
  - slurp:
      src: "{{ zone_file }}"
    register: zone_content
  - set_fact:
      serial_file: "{{ zone_content['content'] | b64decode | regex_replace('(?s)^.*([0-9]{10}).*Serial.*$', '\\1')  }}"

  - set_fact:
      serial_file_incremented: "{{ serial_file[:8] }}{{ '%02d' | format(serial_file[8:] | int +1) }}"

  - set_fact:
      next_serial: "{{ (serial_file_incremented > serial_date_today) | ternary(serial_file_incremented, serial_date_today) }}"
  when: zone_stat.stat.exists == True

- set_fact:
    next_serial: "{{ serial_date_today }}"
  when: zone_stat.stat.exists == False


- name: Ensure DKIM key directory is present
  file:
    state: directory
    mode: '700'
    path: "{{ dkim_dir }}"
    owner: "{{ ansible_user }}"
    group: docker
    recurse: yes

- name: ensure OpenSSL is present
  pip:
    name: pyOpenSSL
    state: present

- name: Create DKIM key
  block:
  - openssl_privatekey:
      path: "{{ dkim_dir }}/{{ zone }}.private.key"
      owner: "{{ ansible_user }}"
      group: docker
      size: 1024
  - openssl_publickey:
      path: "{{ dkim_dir }}/{{ zone }}.public.key"
      privatekey_path: "{{ dkim_dir }}/{{ zone }}.private.key"
      owner: "{{ ansible_user }}"
      group: docker

- name: Create forward zone file
  template:
    src: db.zone.j2
    dest: "{{ zone_file }}"
    owner: root
    group: "{{ bind_group }}"
    mode: 0644
